import React, {useState, useEffect} from "react";
import Note from "./Note";
import axios from 'axios'

import noteService from './services/notes'

const Footer = () => {
  const footerStyle = {
    color : 'green',
    fontStyle: 'italic',
    fontSize: 16
  }

  return (
    <div style = {footerStyle}>
      <br/>
      <em> Note app, Department of Computer Science, University of Helsinki 2021 </em>
    </div>
  )
} 

const Notification = ({message}) => {
  if(message === null) {
    return null
  }

  return (
    <div className = "error">
      {message}
    </div>
  )
}
const App = () => {
  
  const [newNote, setNewNote] = useState('')
  const [notes, setNotes] = useState([])
  const [showAll, setShowAll] = useState(true)
  const [errorMessage, setErrorMessage] = useState(null)


  useEffect(() => {
    let delay = false;
    noteService
      .getAll()
      .then(initialNotes => {
        !delay && setNotes(initialNotes)
        return () => (delay = true)
      })
      .catch(error => {
          console.log('fail')
        })
  }, [])


  const notesToShow = showAll 
    ? notes
    : notes.filter(note => note.important)

  const toggleImportanceOf = (id) => {
    const url = ('http://localhost:3001/notes/' + id.toString())
    const note = notes.find(n => n.id === id)
    const changedNote = {...note, important: !note.important}

    noteService
      .update(id, changedNote)
      .then(returnedNote => {
        setNotes(notes.map(note => note.id !== id ? note : returnedNote))
      })
      .catch(error => {
          setErrorMessage (
            'Note '+note.content+' was already deleted from server'
          )
          setTimeout(() => {
            setErrorMessage(null)
          }, 5000)
          setNotes(notes.filter(n => n.id !== id))
      })
  }

  const handleAddNote = (event) => {
    setNewNote(event.target.value)
  }
  const addNote = (event) => {
    event.preventDefault()
    const noteObject = {
      content : newNote,
      date : new Date(),
      important : Math.random() < 0.5
    }

    noteService
        .create(noteObject)
        .then(returnedNote => {
          setNotes(notes.concat(returnedNote))
          setNewNote('');
        })
        .catch(error => {
          console.log('fail')
        })
  }

  return (
    <>
      <h1> Notes </h1>
      <Notification message = {errorMessage} />
      <div>
        <button onClick = {() => setShowAll(!showAll)}>
          show {showAll ? 'important' : 'all'}
        </button>
      </div>
      <div>
        Add note <input value = {newNote} onChange = {handleAddNote} />
      </div>
      <div>
        <button onClick = {addNote} > Add</button>
      </div>
      <ul>
        {notesToShow.map((note, i) => 
          <Note 
            key = {i} note = {note} 
            toggleImportance = {() => toggleImportanceOf(note.id)}
          />
        )} 
      </ul>
      <Footer />
    </>
  )
}

export default App