{"ast":null,"code":"var _jsxFileName = \"/home/akasian/htt/part1/unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Header = ({\n  feedback\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", feedback, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = Header;\n\nconst Button = ({\n  handleClick,\n  text\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: [\" \", text, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c2 = Button;\n\nconst Total = ({\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: \" All \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: [\" \", value.good + value.bad + value.neutral, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c3 = Total;\n\nconst Average = ({\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: \" Average \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: [\" \", (value.good - value.bad) / 9, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c4 = Average;\n\nconst Positive = ({\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: \" Positive \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: [\"  \", value.good / value.total * 100, \" % \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c5 = Positive;\n\nconst Statistic = ({\n  text,\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: [\" \", text, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: [\" \", value, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c6 = Statistic;\n\nconst Statistics = ({\n  value\n}) => {\n  if (value.good + value.bad + value.neutral === 0) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", value.statistics, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), \"No feedback Given\"]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", value.statistics, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(Statistic, {\n            text: \"good\",\n            value: value.good\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(Statistic, {\n            text: \"neutral\",\n            value: value.neutral\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(Statistic, {\n            text: \"bad\",\n            value: value.bad\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(Total, {\n            value: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(Average, {\n            value: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(Positive, {\n            value: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c7 = Statistics;\n\nconst App = () => {\n  _s();\n\n  const feedback = 'Give feedback'; //Save clicks of each button to its own state\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const value = {\n    statistics: 'statistics',\n    good: good,\n    bad: bad,\n    neutral: neutral,\n    total: good + bad + neutral\n  };\n\n  const incrementGood = () => {\n    setGood(good + 1);\n  };\n\n  const incrementBad = () => {\n    setBad(bad + 1);\n  };\n\n  const incrementNeutral = () => {\n    setNeutral(neutral + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      feedback: feedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: incrementGood,\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: incrementNeutral,\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: incrementBad,\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"fmrB0CGTHg5GliZXC0zedwwuQzY=\");\n\n_c8 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"Total\");\n$RefreshReg$(_c4, \"Average\");\n$RefreshReg$(_c5, \"Positive\");\n$RefreshReg$(_c6, \"Statistic\");\n$RefreshReg$(_c7, \"Statistics\");\n$RefreshReg$(_c8, \"App\");","map":{"version":3,"sources":["/home/akasian/htt/part1/unicafe/src/App.js"],"names":["React","useState","Header","feedback","Button","handleClick","text","Total","value","good","bad","neutral","Average","Positive","total","Statistic","Statistics","statistics","App","setGood","setNeutral","setBad","incrementGood","incrementBad","incrementNeutral"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\n\nconst Header = ({feedback}) => {\n  return (\n    <>\n      <h1> {feedback} </h1>\n    </>\n  )\n}\n\nconst Button = ({handleClick, text}) => {\n  return (\n    <>\n      <button onClick = {handleClick} > {text} </button>\n    </>\n  )\n}\n\nconst Total = ({value}) => {\n  return (\n    <>\n      <td> All </td>\n      <td> {value.good + value.bad + value.neutral} </td>\n    </>\n  )\n}\n\nconst Average = ({value}) => {\n  return (\n    <>\n      <td> Average </td>\n      <td> {(value.good - value.bad)/9} </td>\n    </>\n  )\n}\n\nconst Positive = ({value}) => {\n  return (\n    <>\n      <td> Positive </td> \n      <td>  {value.good/(value.total)*100} % </td> \n    </>\n  )\n}\n\nconst Statistic = ({text,value}) => {\n\n   return (\n    <>\n      <td> {text} </td>\n      <td> {value} </td>\n    </>\n  )\n}\nconst Statistics = ({value}) => {\n\n\n  if(value.good + value.bad + value.neutral === 0) {\n    return(\n      <>  \n        <h1> {value.statistics} </h1>\n        No feedback Given\n      </>\n    )\n  }\n  return (\n    <>\n      <h1> {value.statistics} </h1>\n      <table>\n        <tbody>\n          <tr>\n            <Statistic text = 'good' value = {value.good} />\n          </tr>\n          <tr>\n            <Statistic text = 'neutral' value = {value.neutral} />\n          </tr>\n          <tr>\n            <Statistic text = 'bad' value = {value.bad} />\n          </tr>\n          <tr>\n            <Total value = {value}/>\n          </tr>\n          <tr>\n            <Average value = {value}/>\n          </tr>\n          <tr>\n            <Positive value = {value} />\n          </tr>\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nconst App = () => {\n\n  const feedback = 'Give feedback'\n  //Save clicks of each button to its own state\n  const [good,setGood] = useState(0) \n  const [neutral,setNeutral] = useState(0) \n  const [bad,setBad] = useState(0) \n\n  const value = {\n    statistics : 'statistics',\n    good: good,\n    bad: bad,\n    neutral:  neutral,\n    total : good + bad + neutral\n  }\n\n  const incrementGood = () => {\n    setGood(good + 1)\n  }\n  const incrementBad = () => {\n    setBad(bad + 1)\n  }\n  const incrementNeutral = () => {\n    setNeutral(neutral + 1)\n  }\n  return (\n    <div>\n      <Header feedback = {feedback}/>\n      <Button handleClick ={incrementGood} text = 'good'/>\n      <Button handleClick = {incrementNeutral} text = 'neutral'/>\n      <Button handleClick = {incrementBad} text = 'bad'/>\n      <Statistics value = {value}/>\n    </div>\n  )\n} \n\nexport default App"]},"metadata":{},"sourceType":"module"}